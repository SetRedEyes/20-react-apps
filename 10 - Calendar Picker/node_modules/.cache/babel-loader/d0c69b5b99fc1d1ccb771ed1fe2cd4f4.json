{"ast":null,"code":"var _jsxFileName = \"D:\\\\IT\\\\VSCProjects\\\\Learn React\\\\20-react-apps\\\\10 - Calendar Picker\\\\src\\\\App.js\";\nimport React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport './App.css';\nconst calendarDates = Array(31).fill(0).map((e, i) => i + 1);\nexport default function App() {\n  const [choosingType, setChoosingType] = useState('start');\n  const [startDate, setStartDate] = useState(null);\n  const [endDate, setEndDate] = useState(null);\n\n  const updateDate = choosenDay => {\n    //handle if a user chose before our current range\n    if (startDate && choosenDay < startDate) {\n      setStartDate(choosenDay);\n      return setChoosingType('end');\n    } //handle if a user chose after our current range\n\n\n    if (endDate && choosenDay > endDate) {\n      setEndDate(choosenDay);\n      return setChoosingType('end');\n    }\n\n    if (choosingType === 'start') {\n      setStartDate(choosenDay);\n      return setChoosingType('end');\n    }\n\n    if (choosingType === 'end') {\n      setEndDate(choosenDay);\n    }\n  };\n\n  const checkInBetween = day => {\n    if (!startDate || !endDate) return false;\n    return day > startDate && day < endDate;\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StyledDateChooser, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(StyledDateChooserButton, {\n    onClick: () => setChoosingType('start'),\n    isChoosing: choosingType === 'start',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, \"Start Date \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 22\n    }\n  }, startDate)), /*#__PURE__*/React.createElement(StyledDateChooserButton, {\n    onClick: () => setChoosingType('end'),\n    isChoosing: choosingType === 'end',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, \"End Date \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 20\n    }\n  }, endDate))), /*#__PURE__*/React.createElement(StyledCalendar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, calendarDates.map((day, index) => {\n    let isSelected = day === startDate || day === endDate;\n    let isInBetween = checkInBetween(day);\n    return /*#__PURE__*/React.createElement(StyledCalendarDay, {\n      isInBetween: isInBetween,\n      isSelected: isSelected,\n      key: index,\n      onClick: () => updateDate(day),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }, day);\n  })));\n}\nconst StyledDateChooser = styled.div`\n  display: flex;\n  margin-bottom: 20px;\n`;\nconst StyledDateChooserButton = styled.button`\n  color: #0b204c;\n  text-transform: uppercase;\n  flex: 1;\n  padding: 15px;\n  background: none;\n  cursor: pointer;\n  border: none;\n  border-bottom: 2px solid rgba(11, 32, 76, 0.2);\n  outline: none;\n  border-color: ${props => props.isChoosing ? `#0b204c` : 'none'};\n\n  span {\n    display: block;\n    min-height: 60px;\n    font-size: 50px;\n  }\n`;\nconst StyledCalendar = styled.div`\n  max-width: 400px;\n  border-radius: 10px;\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n  background: #0b204c;\n  color: #fff;\n  padding: 20px;\n`;\nconst StyledCalendarDay = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 10px;\n  transition: 0.3s ease background;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  color: #8096c1;\n  background: ${props => props.isInBetween ? `red` : 'none'};\n\n  ${props => props.isSelected && css`\n      background: #1a1a1a !important;\n      color: #eee;\n    `}\n\n  &:hover {\n    color: #eee;\n    background: #254381;\n  }\n`;","map":{"version":3,"sources":["D:/IT/VSCProjects/Learn React/20-react-apps/10 - Calendar Picker/src/App.js"],"names":["React","useState","styled","css","calendarDates","Array","fill","map","e","i","App","choosingType","setChoosingType","startDate","setStartDate","endDate","setEndDate","updateDate","choosenDay","checkInBetween","day","index","isSelected","isInBetween","StyledDateChooser","div","StyledDateChooserButton","button","props","isChoosing","StyledCalendar","StyledCalendarDay"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport styled, { css } from 'styled-components'\r\nimport './App.css'\r\n\r\nconst calendarDates = Array(31)\r\n  .fill(0)\r\n  .map((e, i) => i + 1)\r\n\r\nexport default function App() {\r\n  const [choosingType, setChoosingType] = useState('start')\r\n  const [startDate, setStartDate] = useState(null)\r\n  const [endDate, setEndDate] = useState(null)\r\n\r\n  const updateDate = (choosenDay) => {\r\n    //handle if a user chose before our current range\r\n    if (startDate && choosenDay < startDate) {\r\n      setStartDate(choosenDay)\r\n      return setChoosingType('end')\r\n    }\r\n\r\n    //handle if a user chose after our current range\r\n    if (endDate && choosenDay > endDate) {\r\n      setEndDate(choosenDay)\r\n      return setChoosingType('end')\r\n    }\r\n\r\n    if (choosingType === 'start') {\r\n      setStartDate(choosenDay)\r\n      return setChoosingType('end')\r\n    }\r\n\r\n    if (choosingType === 'end') {\r\n      setEndDate(choosenDay)\r\n    }\r\n  }\r\n\r\n  const checkInBetween = (day) => {\r\n    if(!startDate||!endDate) return false\r\n    return day > startDate && day < endDate\r\n  }\r\n  return (\r\n    <>\r\n      <StyledDateChooser>\r\n        <StyledDateChooserButton\r\n          onClick={() => setChoosingType('start')}\r\n          isChoosing={choosingType === 'start'}\r\n        >\r\n          Start Date <span>{startDate}</span>\r\n        </StyledDateChooserButton>\r\n        <StyledDateChooserButton\r\n          onClick={() => setChoosingType('end')}\r\n          isChoosing={choosingType === 'end'}\r\n        >\r\n          End Date <span>{endDate}</span>\r\n        </StyledDateChooserButton>\r\n      </StyledDateChooser>\r\n\r\n      <StyledCalendar>\r\n        {calendarDates.map((day, index) => {\r\n          let isSelected = day === startDate || day === endDate\r\n          let isInBetween = checkInBetween(day)\r\n          return (\r\n            <StyledCalendarDay\r\n              isInBetween={isInBetween}\r\n              isSelected={isSelected}\r\n              key={index}\r\n              onClick={() => updateDate(day)}\r\n            >\r\n              {day}\r\n            </StyledCalendarDay>\r\n          )\r\n        })}\r\n      </StyledCalendar>\r\n    </>\r\n  )\r\n}\r\n\r\nconst StyledDateChooser = styled.div`\r\n  display: flex;\r\n  margin-bottom: 20px;\r\n`\r\n\r\nconst StyledDateChooserButton = styled.button`\r\n  color: #0b204c;\r\n  text-transform: uppercase;\r\n  flex: 1;\r\n  padding: 15px;\r\n  background: none;\r\n  cursor: pointer;\r\n  border: none;\r\n  border-bottom: 2px solid rgba(11, 32, 76, 0.2);\r\n  outline: none;\r\n  border-color: ${(props) => (props.isChoosing ? `#0b204c` : 'none')};\r\n\r\n  span {\r\n    display: block;\r\n    min-height: 60px;\r\n    font-size: 50px;\r\n  }\r\n`\r\nconst StyledCalendar = styled.div`\r\n  max-width: 400px;\r\n  border-radius: 10px;\r\n  display: grid;\r\n  grid-template-columns: repeat(7, 1fr);\r\n  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\r\n  background: #0b204c;\r\n  color: #fff;\r\n  padding: 20px;\r\n`\r\n\r\nconst StyledCalendarDay = styled.button`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 10px;\r\n  transition: 0.3s ease background;\r\n  border: none;\r\n  outline: none;\r\n  cursor: pointer;\r\n  color: #8096c1;\r\n  background: ${(props) => (props.isInBetween?  `red`: 'none')};\r\n\r\n  ${(props) =>\r\n    props.isSelected &&\r\n    css`\r\n      background: #1a1a1a !important;\r\n      color: #eee;\r\n    `}\r\n\r\n  &:hover {\r\n    color: #eee;\r\n    background: #254381;\r\n  }\r\n`\r\n"]},"metadata":{},"sourceType":"module"}